# 样式和 CSS 规范

## Tailwind CSS 架构

参考项目配置：[tailwind.config.ts](mdc:tailwind.config.ts) 和 [globals.css](mdc:src/app/globals.css)

### 1. 颜色系统

```typescript
// 主色调配置（tailwind.config.ts）
colors: {
  primary: {
    50: '#eff6ff',   // 最浅色调
    500: '#3b82f6',  // 主色调
    900: '#1e3a8a',  // 最深色调
  },
  secondary: {
    50: '#f8fafc',
    500: '#64748b',
    900: '#0f172a',
  },
}

// ✅ 正确：使用语义化颜色
<button className="bg-primary-500 text-white hover:bg-primary-600">
  主要操作
</button>

// ❌ 避免：硬编码颜色值
<button style={{ backgroundColor: '#3b82f6' }}>
  按钮
</button>
```

### 2. 间距系统

```css
/* 自定义间距（tailwind.config.ts） */
spacing: {
  '18':'4.5rem',/* 72px */
  '88': "22rem"; /* 352px */
}

/* ✅ 正确：使用一致的间距 */
.section-padding {
  @apply py-16 lg:py-24;
}

.container-responsive {
  @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
}
```

## CSS 层级架构

### 1. Tailwind 层级结构

```css
/* globals.css 结构 */
@tailwind base; /* 基础样式重置 */
@tailwind components; /* 组件级样式 */
@tailwind utilities; /* 工具类样式 */

@layer base {
  /* 全局基础样式 */
  html {
    @apply scroll-smooth;
  }

  body {
    @apply font-sans text-gray-900 bg-white antialiased;
  }
}

@layer components {
  /* 可复用组件样式 */
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium py-3 px-6 rounded-lg hover:shadow-lg transition-all duration-300;
  }
}

@layer utilities {
  /* 自定义工具类 */
  .text-balance {
    text-wrap: balance;
  }
}
```

### 2. 组件样式模式

```css
/* ✅ 推荐：医疗科技主题组件样式 */
.card-medical {
  @apply bg-white rounded-xl p-6 shadow-sm border border-gray-200 hover:shadow-md hover:shadow-blue-100 transition-all duration-300;
}

.gradient-medical {
  @apply bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100;
}

.text-gradient {
  @apply bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;
}
```

## 响应式设计规范

### 1. 断点使用

```typescript
// ✅ 正确：移动优先的响应式设计
<div className="
  grid grid-cols-1           // 移动端：1列
  md:grid-cols-2             // 平板：2列
  lg:grid-cols-3             // 桌面：3列
  gap-4 md:gap-6 lg:gap-8    // 响应式间距
">
  {items.map(item => <Card key={item.id} {...item} />)}
</div>

// ✅ 正确：响应式字体
<h1 className="text-2xl md:text-3xl lg:text-4xl font-bold">
  标题
</h1>
```

### 2. 响应式组件设计

```typescript
// ✅ 正确：响应式导航
const Header: React.FC = () => (
  <header className="fixed top-0 left-0 right-0 z-50 bg-white/80 backdrop-blur-md">
    <div className="container-responsive">
      <div className="flex items-center justify-between h-16 md:h-20">
        {/* 桌面导航 */}
        <nav className="hidden md:flex items-center space-x-8">
          {navItems.map((item) => (
            <Link key={item.name} className="nav-link">
              {item.name}
            </Link>
          ))}
        </nav>

        {/* 移动端菜单按钮 */}
        <button className="md:hidden p-2 rounded-lg hover:bg-gray-100">
          <Menu size={24} />
        </button>
      </div>
    </div>
  </header>
);
```

## 动画和过渡效果

### 1. CSS 过渡动画

```css
/* 自定义动画（tailwind.config.ts） */
animation: {
  'fade-in': 'fadeIn 0.5s ease-in-out',
  'slide-up': 'slideUp 0.5s ease-out',
  'bounce-slow': 'bounce 2s infinite',
}

keyframes: {
  fadeIn: {
    '0%': { opacity: '0' },
    '100%': { opacity: '1' },
  },
  slideUp: {
    '0%': { transform: 'translateY(10px)', opacity: '0' },
    '100%': { transform: 'translateY(0)', opacity: '1' },
  },
}

/* 使用示例 */
.animate-fade-in-up {
  animation: fadeInUp 0.6s ease-out forwards;
}
```

### 2. Framer Motion 集成

```typescript
// ✅ 正确：组合CSS和Motion动画
const AnimatedCard: React.FC = ({ children }) => (
  <motion.div
    className="card-medical"
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3 }}
    whileHover={{ scale: 1.02 }}
  >
    {children}
  </motion.div>
);
```

## 主题和暗黑模式准备

```css
/* 为未来暗黑模式做准备 */
@layer base {
  :root {
    --color-primary: 59 130 246; /* blue-500 */
    --color-secondary: 100 116 139; /* slate-500 */
    --color-background: 255 255 255; /* white */
    --color-foreground: 15 23 42; /* slate-900 */
  }

  .dark {
    --color-background: 15 23 42; /* slate-900 */
    --color-foreground: 248 250 252; /* slate-50 */
  }
}

/* 使用CSS变量 */
.theme-aware {
  background-color: rgb(var(--color-background));
  color: rgb(var(--color-foreground));
}
```

## 性能优化

### 1. CSS 优化

```css
/* ✅ 正确：避免复杂选择器 */
.card-title {
  @apply text-lg font-semibold text-gray-900;
}

/* ❌ 避免：深层嵌套 */
.section .container .card .title .text {
  /* 避免这种深层嵌套 */
}
```

### 2. 减少样式重复

```typescript
// ✅ 正确：使用cn工具函数合并类名
import { cn } from "@/lib/utils";

const Button: React.FC<ButtonProps> = ({
  variant,
  size,
  className,
  ...props
}) => {
  return (
    <button
      className={cn(
        // 基础样式
        "font-medium rounded-lg transition-all duration-300",
        // 变体样式
        {
          "bg-primary-500 text-white": variant === "primary",
          "bg-secondary-500 text-white": variant === "secondary",
        },
        // 尺寸样式
        {
          "px-4 py-2 text-sm": size === "sm",
          "px-6 py-3 text-base": size === "md",
        },
        // 外部传入的类名
        className
      )}
      {...props}
    />
  );
};
```

## 可访问性样式

```css
/* 焦点可见性 */
.focus-visible {
  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
}

/* 高对比度模式支持 */
@media (prefers-contrast: high) {
  .btn-primary {
    @apply border-2 border-white;
  }
}

/* 减少动画偏好 */
@media (prefers-reduced-motion: reduce) {
  .animate-bounce-slow {
    animation: none;
  }
}
```

## 命名约定

### 1. CSS 类命名

- **组件类**：使用语义化命名，如 `card-medical`、`btn-primary`
- **工具类**：描述性命名，如 `text-gradient`、`section-padding`
- **状态类**：前缀+状态，如 `is-active`、`has-error`

### 2. CSS 变量命名

```css
:root {
  /* 颜色变量 */
  --color-primary-500: 59 130 246;
  --color-text-primary: 15 23 42;

  /* 间距变量 */
  --spacing-section: 4rem;
  --spacing-card: 1.5rem;

  /* 阴影变量 */
  --shadow-medical: 0 4px 6px -1px rgba(59, 130, 246, 0.1);
}
```

遵循这些样式规范可以确保项目的视觉一致性、维护效率和用户体验质量。
